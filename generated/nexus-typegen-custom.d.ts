/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CelestialBody: { // root type
    bodyType: string; // String!
    diameter: number; // Float!
    gravity: number; // Float!
    id: number; // Float!
    isPlanet: boolean; // Boolean!
    mass?: NexusGenRootTypes['CelestialBodyMass'] | null; // CelestialBodyMass
    name: string; // String!
  }
  CelestialBodyMass: { // root type
    massExponent: number; // Float!
    massValue: number; // Float!
  }
  Composition: { // root type
    majorElements?: Array<NexusGenRootTypes['MajorElementsEntity'] | null> | null; // [MajorElementsEntity]
  }
  MajorElementsEntity: { // root type
    abbr: string; // String!
    element: string; // String!
    percentageOfComposition: number; // Float!
  }
  Mass: { // root type
    massExponent: number; // Float!
    massValue: number; // Float!
  }
  Planet: { // root type
    diameter: number; // Float!
    id: number; // Float!
    lengthOfDay: number; // Float!
    name: string; // String!
  }
  Query: {};
  Rings: { // root type
    binnerRadius: number; // Float!
    outerRadius?: number | null; // Float
    textures?: NexusGenRootTypes['Textures'] | null; // Textures
  }
  SolarDictionaryItem: { // root type
    alternativeName?: string | null; // String
    avgTemp?: string | null; // String
    axialTilt?: number | null; // Float
    composition?: NexusGenRootTypes['Composition'] | null; // Composition
    density?: number | null; // Float
    diameter: number; // Float!
    dimension?: number | null; // Float
    discoveredBy?: string | null; // String
    discoveryDate?: string | null; // String
    gravity?: number | null; // Float
    id: number; // Int!
    lengthOfDay?: number | null; // Float
    mass?: NexusGenRootTypes['Mass'] | null; // Mass
    name: string; // String!
    orbitPositionOffset?: number | null; // Float
    orbitalInclination?: number | null; // Float
    orbitalPeriod?: number | null; // Float
    orbitalVelocity?: number | null; // Float
    textures?: NexusGenRootTypes['Textures'] | null; // Textures
  }
  Textures: { // root type
    base: string; // String!
    clouds?: string | null; // String
    specular?: string | null; // String
    topo?: string | null; // String
  }
  Vol: { // root type
    volExponent: number; // Float!
    volValue: number; // Float!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CelestialBody: { // field return type
    bodyType: string; // String!
    diameter: number; // Float!
    gravity: number; // Float!
    id: number; // Float!
    isPlanet: boolean; // Boolean!
    mass: NexusGenRootTypes['CelestialBodyMass'] | null; // CelestialBodyMass
    name: string; // String!
  }
  CelestialBodyMass: { // field return type
    massExponent: number; // Float!
    massValue: number; // Float!
  }
  Composition: { // field return type
    majorElements: Array<NexusGenRootTypes['MajorElementsEntity'] | null> | null; // [MajorElementsEntity]
  }
  MajorElementsEntity: { // field return type
    abbr: string; // String!
    element: string; // String!
    percentageOfComposition: number; // Float!
  }
  Mass: { // field return type
    massExponent: number; // Float!
    massValue: number; // Float!
  }
  Planet: { // field return type
    diameter: number; // Float!
    id: number; // Float!
    lengthOfDay: number; // Float!
    name: string; // String!
  }
  Query: { // field return type
    allCelestialBodies: Array<NexusGenRootTypes['CelestialBody'] | null>; // [CelestialBody]!
    allPlanets: NexusGenRootTypes['Planet'][]; // [Planet!]!
    planet: Array<NexusGenRootTypes['Planet'] | null>; // [Planet]!
    solarDictionary: Array<NexusGenRootTypes['SolarDictionaryItem'] | null>; // [SolarDictionaryItem]!
  }
  Rings: { // field return type
    binnerRadius: number; // Float!
    outerRadius: number | null; // Float
    textures: NexusGenRootTypes['Textures'] | null; // Textures
  }
  SolarDictionaryItem: { // field return type
    alternativeName: string | null; // String
    avgTemp: string | null; // String
    axialTilt: number | null; // Float
    composition: NexusGenRootTypes['Composition'] | null; // Composition
    density: number | null; // Float
    diameter: number; // Float!
    dimension: number | null; // Float
    discoveredBy: string | null; // String
    discoveryDate: string | null; // String
    gravity: number | null; // Float
    id: number; // Int!
    lengthOfDay: number | null; // Float
    mass: NexusGenRootTypes['Mass'] | null; // Mass
    name: string; // String!
    orbitPositionOffset: number | null; // Float
    orbitalInclination: number | null; // Float
    orbitalPeriod: number | null; // Float
    orbitalVelocity: number | null; // Float
    textures: NexusGenRootTypes['Textures'] | null; // Textures
  }
  Textures: { // field return type
    base: string; // String!
    clouds: string | null; // String
    specular: string | null; // String
    topo: string | null; // String
  }
  Vol: { // field return type
    volExponent: number; // Float!
    volValue: number; // Float!
  }
}

export interface NexusGenFieldTypeNames {
  CelestialBody: { // field return type name
    bodyType: 'String'
    diameter: 'Float'
    gravity: 'Float'
    id: 'Float'
    isPlanet: 'Boolean'
    mass: 'CelestialBodyMass'
    name: 'String'
  }
  CelestialBodyMass: { // field return type name
    massExponent: 'Float'
    massValue: 'Float'
  }
  Composition: { // field return type name
    majorElements: 'MajorElementsEntity'
  }
  MajorElementsEntity: { // field return type name
    abbr: 'String'
    element: 'String'
    percentageOfComposition: 'Float'
  }
  Mass: { // field return type name
    massExponent: 'Float'
    massValue: 'Float'
  }
  Planet: { // field return type name
    diameter: 'Float'
    id: 'Float'
    lengthOfDay: 'Float'
    name: 'String'
  }
  Query: { // field return type name
    allCelestialBodies: 'CelestialBody'
    allPlanets: 'Planet'
    planet: 'Planet'
    solarDictionary: 'SolarDictionaryItem'
  }
  Rings: { // field return type name
    binnerRadius: 'Float'
    outerRadius: 'Float'
    textures: 'Textures'
  }
  SolarDictionaryItem: { // field return type name
    alternativeName: 'String'
    avgTemp: 'String'
    axialTilt: 'Float'
    composition: 'Composition'
    density: 'Float'
    diameter: 'Float'
    dimension: 'Float'
    discoveredBy: 'String'
    discoveryDate: 'String'
    gravity: 'Float'
    id: 'Int'
    lengthOfDay: 'Float'
    mass: 'Mass'
    name: 'String'
    orbitPositionOffset: 'Float'
    orbitalInclination: 'Float'
    orbitalPeriod: 'Float'
    orbitalVelocity: 'Float'
    textures: 'Textures'
  }
  Textures: { // field return type name
    base: 'String'
    clouds: 'String'
    specular: 'String'
    topo: 'String'
  }
  Vol: { // field return type name
    volExponent: 'Float'
    volValue: 'Float'
  }
}

export interface NexusGenArgTypes {
  Query: {
    planet: { // args
      id: number; // Int!
    }
    solarDictionary: { // args
      id?: number | null; // Int
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}